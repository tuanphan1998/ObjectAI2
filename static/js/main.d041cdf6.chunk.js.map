{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","imageUrl","undefined","classifier","prediction","onDrop","acceptedFiles","file","URL","createObjectURL","_this","setState","classifyImage","imgTag","document","getElementById","predict","error","results","console","mobileNet","ml5","log","_this2","_this3","this","react_default","a","createElement","className","src","alt","id","label","confidence","onClick","disabled","es","_ref","getRootProps","getInputProps","isDragActive","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+SAsFeA,6MA/EbC,MAAQ,CACNC,cAAUC,EACVC,gBAAYD,EACZE,gBAAYF,KAYdG,OAAS,SAACC,GACR,IAAMC,EAAOC,IAAIC,gBAAgBH,EAAc,IAC/CI,EAAKC,SAAS,CAAEV,SAAUM,OAG5BK,cAAgB,WACd,IAAMC,EAASC,SAASC,eAAe,WAChBL,EAAKV,MAApBG,WACGa,QAAQH,EAAQ,SAACI,EAAOC,GAC7BD,EACFE,QAAQF,MAAMA,GAEdP,EAAKC,SAAS,CAAEP,WAAYc,EAAQ,gNAnBlCE,EAAYC,kBAAoB,YAAa,WACjDF,QAAQG,IAAI,mBACZC,EAAKZ,SAAS,CAAER,WAAYiB,oIAsBvB,IAAAI,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAAd,SACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEXJ,KAAKzB,MAAMC,UACXyB,EAAAC,EAAAC,cAAA,UAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,KAAKzB,MAAMC,SAAU8B,IAAI,UAAUC,GAAG,cAItDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEXJ,KAAKzB,MAAMI,YACXsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,sBAAH,IAA2DJ,KAAKzB,MAAMI,WAAW6B,OACjFP,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,oBAAH,IAA6DJ,KAAKzB,MAAMI,WAAW8B,iBAO/FR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gCAAgCM,QAAS,kBAAMX,EAAKZ,iBAAiBwB,UAAWX,KAAKzB,MAAMC,UAA7G,UAEAyB,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAUhC,OAAQoB,KAAKpB,QACpB,SAAAiC,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,cAAeC,EAAhCH,EAAgCG,aAAhC,OACCf,EAAAC,EAAAC,cAAA,MAASW,IACPb,EAAAC,EAAAC,cAAA,QAAWY,KAETC,EACEf,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,0GAtEAc,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,WAAP,KACEzB,EAAAC,EAAAC,cAACwB,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,KAAK,SAAAC,GACJA,EAAaC,eAEdC,MAAM,SAAA1C,GACLE,QAAQF,MAAMA,EAAM2C","file":"static/js/main.d041cdf6.chunk.js","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone'\nimport './App.css';\nimport * as ml5 from \"ml5\";\n\nclass App extends React.Component {\n\n  state = {\n    imageUrl: undefined,\n    classifier: undefined,\n    prediction: undefined,\n  }\n\n  // Load MobileNet.\n  async componentDidMount() {\n    const mobileNet = ml5.imageClassifier(\"MobileNet\", () => {\n      console.log(\"Model is loaded\");\n      this.setState({ classifier: mobileNet });\n    });\n  }\n\n  // Handle upload file.\n  onDrop = (acceptedFiles) => {\n    const file = URL.createObjectURL(acceptedFiles[0]);\n    this.setState({ imageUrl: file });\n  }\n\n  classifyImage = () => {\n    const imgTag = document.getElementById(\"myImage\"); // get image tag.\n    const { classifier } = this.state;\n    classifier.predict(imgTag, (error, results) => { \n      if (error) {\n        console.error(error);\n      } else {\n        this.setState({ prediction: results[0] });\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App mt-5\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-one-third\">\n            <h1 className=\"subtitle has-text-centered\">Image</h1>\n            <div className=\"card\">\n              <div className=\"card-image\">\n                {\n                  this.state.imageUrl &&\n                  < figure className=\"image is-4by3\">\n                    <img src={this.state.imageUrl} alt=\"nothing\" id=\"myImage\" />\n                  </figure>\n                }\n              </div>\n              <div className=\"card-content\">\n                {\n                  this.state.prediction &&\n                  <div className=\"content\">\n                    <p><span className=\"has-text-weight-bold\">Kết quả:</span> {this.state.prediction.label}</p>\n                    <p><span className=\"has-text-weight-bold\">Chính xác:</span> {this.state.prediction.confidence}</p>\n                  </div>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n        <button className=\"button is-success is-outlined\" onClick={() => this.classifyImage()} disabled={!this.state.imageUrl}>Detect</button>\n        \n        <Dropzone onDrop={this.onDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              {\n                isDragActive ?\n                  <p>Nhảy tay ra ...</p> :\n                  <p>Hãy kéo tấm hình vào đây để nhận diện</p>\n              }\n            </div>\n          )}\n        </Dropzone>\n\n      </div >\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}